[package]
name = "greeting-svg"
version = "0.3.0-rc.3"
edition = "2024"
authors = ["Hantong Chen <cxwdyx620@gmail.com>"]
license = "MIT"
rust-version = "1.85.0"

[dependencies]
ammonia = "4.0.0"
anyhow = "1.0.96"
arc-swap = "1.7.1"
axum = { version = "0.8.1", default-features = false, features = ["http1", "http2", "tokio"] }
bytes = "1.10.0"
chrono = { version = "0.4.39", default-features = false, features = ["now", "std", "clock", "serde"] }
chrono-tz = "0.10.1"
cidr = { version = "0.3.1", features = ["serde"] }
clap = { version = "4.5.30", features = ["derive"] }
dashmap = { version = "6.1.0", features = ["inline", "rayon"] }
deadpool-sqlite = { version = "0.10.0", optional = true }
fluent-uri = "0.3.2"
foldhash = "0.1.4"
macro-toolset = { version = "0.8.2", default-features = false, features = [
    "feat-string",
    "feat-string-ext-ammonia",
    "feat-string-ext-ryu",
] }
miku-server-timing = "0.2.0"
mimalloc = "0.1.43"
parking_lot = { version = "0.12.3", features = ["hardware-lock-elision"] }
rand = "0.9.0"
rayon = "1.10.0"
reqwest = { version = "0.12.12", default-features = false, features = [
    "http2",
    "rustls-tls-native-roots",
    "json",
    "gzip",
    "brotli",
    "zstd",
    "deflate",
] }
rusqlite = { version = "0.33.0", optional = true }
serde = { version = "1.0.218", features = ["derive", "rc"] }
serde_json = { version = "1.0.139", features = ["preserve_order"] }
svg = "0.18.0"
thiserror = "2.0.11"
tokio = { version = "1.43.0", features = ["macros", "net", "parking_lot", "rt-multi-thread", "signal", "time"] }
tower-http = { version = "0.6.2", features = [
    "compression-deflate",
    "compression-gzip",
    "compression-br",
    "compression-zstd",
] }
tracing = "0.1.41"
tracing-subscriber = { version = "0.3.19", features = ["env-filter", "parking_lot"] }

[build-dependencies]
anyhow = "1.0.96"
chrono = { version = "0.4.39", default-features = false, features = ["clock"] }
imagesize = "0.13.0"
macro-toolset = { version = "0.8.2", default-features = false, features = ["feat-string", "feat-string-ext-base64"] }

[profile.release]
opt-level = 3
lto = true
strip = true
codegen-units = 1
panic = "unwind"

[features]
default = ["sqlite-bundled"]

# Store data in SQLite database
sqlite = ["dep:deadpool-sqlite", "dep:rusqlite"]
sqlite-bundled = ["sqlite", "rusqlite/bundled"]  # For windows

# === Lints config ===

[lints.rust]
unsafe_code = "warn"
missing_docs = "warn"
missing_debug_implementations = "warn"
unreachable_pub = "warn"

# Only works in nightly channel, use `cargo +nightly clippy --fix --allow-dirty --allow-staged`

[lints.clippy]
# See: https://rust-lang.github.io/rust-clippy/master/index.html for more details.

# Checks for attributes that allow lints without a reason.
allow_attributes_without_reason = "warn"
# Checks for `assert!(r.is_ok())` or `assert!(r.is_err())` calls, just `unwrap()` instead.
assertions_on_result_states = "warn"
# Checks for code like `foo = bar.clone()`; use `Clone::clone_from()` instead.
assigning_clones = "warn"
# Instead of using an if statement to convert a bool to an int, this lint suggests using a from() function or an as coercion.
bool_to_int_with_if = "warn"
# Checks for methods with high cognitive complexity.
cognitive_complexity = "warn"
# Checks usage of std::fs::create_dir and suggest using std::fs::create_dir_all instead.
create_dir = "warn"
# Checks for usage of the dbg! macro.
dbg_macro = "warn"
# Checks for function/method calls with a mutable parameter in debug_assert!, debug_assert_eq! and debug_assert_ne! macros.
# Mutating something in a debug_assert! macro results in different behavior between a release and debug build.
debug_assert_with_mut_call = "warn"
# Checks for literal calls to `Default::default()`. Use `$type::default()` instead.
default_trait_access = "warn"
# Checks for types that derive PartialEq and could implement Eq.
# derive_partial_eq_without_eq = "warn"
# Checks for usage of unicode scripts other than those explicitly allowed by the lint config.
disallowed_script_idents = "deny"
# Detects the syntax ['foo'] in documentation comments (notice quotes instead of backticks) outside of code blocks
doc_link_with_quotes = "warn"
# Checks for the presence of _, :: or camel-case words outside ticks in documentation.
doc_markdown = "warn"
# Checks for usage of if expressions with an else if branch, but without a final else branch.
else_if_without_else = "deny"
# Checks for use Enum::*.
enum_glob_use = "warn"
# is_file doesn’t cover special file types in unix-like systems, and doesn’t cover symlink in windows.
# Using !FileType::is_dir() is a better way
filetype_is_file = "warn"
# Checks for usage of .to_string() on an &&T where T implements ToString directly (like &&str or &&String).
inefficient_to_string = "warn"
# Checks for usage of std::mem::forget(t) where t is Drop or has a field that implements Drop.
mem_forget = "warn"
# Checks the doc comments of publicly visible functions that return a Result type and warns if there is no # Errors section.
# missing_errors_doc = "warn"
# Checks the doc comments of publicly visible functions that may panic and warns if there is no # Panics section.
missing_panics_doc = "warn"
# Checks that module layout uses only self named module files; bans mod.rs files.
mod_module_files = "deny"
# Checks for multiple inherent implementations of a struct
multiple_inherent_impl = "warn"
# Checks for usage of Mutex<X> where an atomic will do.
mutex_atomic = "warn"
# Checks for usage of Mutex<X> where X is an integral type. Use Atomic instead.
mutex_integer = "warn"
# The lint checks for if-statements appearing in loops that contain a continue statement in either their main blocks or their else-blocks, 
# when omitting the else-block possibly with some rearrangement of code can make the code easier to understand.
needless_continue = "warn"
# Checks for usage of panic!.
panic = "warn"
# Checks for temporaries returned from function calls in a match scrutinee that have the clippy::has_significant_drop attribute.
significant_drop_in_scrutinee = "warn"
# Checks for usage of todo!.
todo = "warn"
# Checks for usage of unimplemented!.
unimplemented = "warn"
# Checks for usage of unreachable!.
unreachable = "warn"
# Checks for wildcard dependencies in the Cargo.toml.
wildcard_dependencies = "deny"
# Checks for wildcard imports use _::*
wildcard_imports = "warn"
